//Vremenska slozenost algoritma varira od O(n*logn) do O(n*n)
//Algoritam radi sa random-access iteratorima
//In place
//nestabilan

#include <iostream>
#include <vector>

template <typename It, typename C>
void shellsort(It begin, It end, C comp) {
    int n = std::distance(begin, end);
    for (int gap = n / 2; gap > 0; gap /= 2) {
        for (int i = gap; i < n; ++i) {
            auto current = std::move(*(begin + i));
            int j = i;
            for (; j >= gap && comp(current, *(begin + j - gap)); j -= gap) {
                *(begin + j) = std::move(*(begin + j - gap));
            }
            *(begin + j) = std::move(current);
        }
    }
}

int main() {
    std::vector<int> numbers = {4, 2, 7, 5, 1, 3, 6};
    
    std::cout << "Before sorting: ";
    for (int num : numbers) {
        std::cout << num << " ";
    }
    std::cout << std::endl;
    
    shellsort(numbers.begin(), numbers.end(), std::less<int>());
    
    std::cout << "After sorting in ascending order: ";
    for (int num : numbers) {
        std::cout << num << " ";
    }
    std::cout << std::endl;
    
    shellsort(numbers.begin(), numbers.end(), std::greater<int>());
    
    std::cout << "After sorting in descending order: ";
    for (int num : numbers) {
        std::cout << num << " ";
    }
    std::cout << std::endl;
    
    return 0;
}
